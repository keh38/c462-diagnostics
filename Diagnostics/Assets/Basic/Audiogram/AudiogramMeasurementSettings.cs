using System;
using System.ComponentModel;

namespace Audiograms
{
    public enum TestEar { Left, Right, Both }

    public class AudiogramMeasurementSettings : BasicMeasurementConfiguration
    {
        [Category("Sequence")]
        [Description("Minimum interval between test stimuli (s)")]
        [DisplayName("Min ISI")]
        public float MinISI {  get; set; }
        private bool ShouldSerializeMinISI() { return false; }

        [Category("Sequence")]
        [Description("Maximum interval between test stimuli (s)")]
        [DisplayName("Max ISI")]
        public float MaxISI { get; set; }
        private bool ShouldSerializeMaxISI() { return false; }
 
        [Category("Sequence")]
        [Description("Ears to test")]
        [DisplayName("Ears")]
        public TestEar TestEar { get; set; }
        private bool ShouldSerializeTestEar() { return false; }
        
        [Category("Sequence")]
        [Description("Test frequencies")]
        [DisplayName("Frequencies")]
        public float[] TestFrequencies { get; set; }
        private bool ShouldSerializeTestFrequencies() { return false; }


        [Category("Bookkeeping")]
        [Description("Merge data generated by this audiogram with the existing data on the tablet")]
        public bool Merge { set; get; }
        private bool ShouldSerializeMerge() { return false; }

        [Category("Stimulus")]
        [Description("Ramp applied to tones (ms)")]
        public float Ramp { set; get; }
        private bool ShouldSerializeRamp() { return false; }

        [Category("Stimulus")]
        [Description("Duration of tone (ms)")]
        public float ToneDuration { set; get; }
        private bool ShouldSerializeToneDuration() {  return false; }

        [Category("Stimulus")]
        [Description("Interval between pips (ms)")]
        [DisplayName("Pip interval")]
        public float IPI_ms { set; get; }
        private bool ShouldSerializeIPI_ms() {  return false; }

        [Category("Stimulus")]
        [Description("Number of tone pips")]
        public int NumPips { set; get;  }
        private bool ShouldSerializeNumPips() {  return false; }

        [Category("Response")]
        [Description("Minimum valid response time (s)")]
        [DisplayName("Min valid time")]
        public float MinValidResponseTime { set; get; }
        private bool ShouldSerializeMinValidResponseTime() {  return false; }

        [Category("Response")]
        [Description("Maximum valid response time (s)")]
        [DisplayName("Max valid time")]
        public float MaxValidResponseTime { set; get; }
        private bool ShouldSerializeMaxValidResponseTime() { return false; }

        [Browsable(false)]
        public float MaxMaskerSPL { set; get; }

        [Category("Sequence")]
        [Description("If false, level is tracked in dB HL")]
        public bool TrackInSPL = false;
        public AudiogramMeasurementSettings()
        {
            Name = "Defaults";
            TestEar = TestEar.Both;
            TestFrequencies = new float[] { 750, 1000, 1500, 2000, 3000, 4000, 8000, 125, 250, 500 };
    
            Merge = false;
            Ramp = 25f;
            ToneDuration = 1000f;
            NumPips = 1;
            IPI_ms = 50;
            MaxMaskerSPL = 80f;
            MinValidResponseTime = 0.18f;
            MaxValidResponseTime = 2.5f;
            TrackInSPL = false;
            MinISI = 3;
            MaxISI = 7;
        }

    }
}
