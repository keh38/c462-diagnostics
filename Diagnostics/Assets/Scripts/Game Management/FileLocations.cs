using System.Collections.Generic;
using System.IO;
using System.Linq;
using UnityEngine;

using KLib;

/// <summary>
/// Centralized place to specify the locations for the various data files generated by the game.
/// </summary>
public static class FileLocations
{
    private static string _currentSubject = "";
    private static string _currentProject = "";

    public static string SubjectFolder { get; private set; } = "";
    public static string ProjectFolder { get; private set; } = "";
    public static string DataRoot { get; private set; } = Path.Combine(Application.persistentDataPath, "Projects");

    public static void SetDataRoot(string folder)
    {
        DataRoot = folder;

        ProjectFolder = Path.Combine(DataRoot, _currentProject);
    }

    public static void SetSubject(string project, string subject)
    {
        _currentProject = project;
        _currentSubject = subject;

        ProjectFolder = Path.Combine(DataRoot, project);
        SubjectFolder = Path.Combine(ProjectFolder, "Subjects", subject);
        if (!Directory.Exists(SubjectFolder))
        {
            Directory.CreateDirectory(SubjectFolder);
            Debug.Log($"Created subject folder {SubjectFolder}");
        }
    }

    public static void CheckFolderStructure()
    {
        if (!Directory.Exists(DataRoot))
        {
            Directory.CreateDirectory(DataRoot);
            CreateProjectFolder("Scratch");
        }
    }

    public static void CreateProjectFolder(string projectName)
    {
        Directory.CreateDirectory(Path.Combine(DataRoot, projectName));
        Directory.CreateDirectory(Path.Combine(DataRoot, projectName, "Subjects"));
        Directory.CreateDirectory(Path.Combine(DataRoot, projectName, "Resources"));

        var resourceFolder = Path.Combine(DataRoot, projectName, "Resources");
        var subFolders = new List<string>()
        {
            "Config Files",
            "Images",
            "MATLAB",
            "Plugins",
            "Protocols",
            "Schedules",
            "Videos",
            "Wav Files"
        };

        foreach (var subFolder in subFolders)
        {
            var folder = Path.Combine(resourceFolder, subFolder);
            if (!Directory.Exists(folder))
            {
                Directory.CreateDirectory(folder);
            }
        }
    }

    public static List<string> EnumerateProjects()
    {
        return FileIO.EnumerateFolderNames(DataRoot);
    }

    public static List<string> EnumerateSubjects(string project)
    {
        return FileIO.EnumerateFolderNames(Path.Combine(DataRoot, project, "Subjects"));
    }

    public static bool DoesSubjectExist(string project, string id)
    {
        var folder = Path.Combine(DataRoot, project, "Subjects", id);
        return Directory.Exists(folder);
    }

    public static string RemoteRoot
    {
        get { return "Training"; }
    }

    public static string RemoteFolder(string project)
    {
        return project;
    }

    public static string LocalResourceFolder(string resourceType)
    {
        return Path.Combine(ProjectFolder, "Resources", resourceType);
    }
    public static string LocalResourceFolder(string project, string resourceType)
    {
        return Path.Combine(DataRoot, project, "Resources", resourceType);
    }
    public static string RemoteResourceFolder(string project, string resourceType)
    {
        return FileLocations.RemoteFolder(project) + "/Resources/" + resourceType + "/";
    }
    public static string RemoteUploadFolder
    {
        get
        {
            return FileLocations.RemoteFolder(_currentProject) + "/New/";
        }
    }

    public static string ConfigFile(string name)
    {
        return Path.Combine(ProjectFolder, "Resources", "Config Files", name + ".xml");
    }

    public static string ConfigFile(string type, string name)
    {
        return Path.Combine(ProjectFolder, "Resources", "Config Files", type + "." + name + ".xml");
    }

    public static string StateFile
    {
        get { return Path.Combine(Application.persistentDataPath, "state.xml"); }
    }

    public static string UploadLog
    {
        get { return Path.Combine(DataRoot, "upload.log"); }
    }

    public static string ProjectMetadata(string project)
    {
        return Path.Combine(DataRoot, project, "pmd.bin");
    }

    public static string TinnitusMatchHistoryFile { get { return Path.Combine(SubjectFolder, "meta", "tmh.json"); } }

    // Paths to project manager file
    public static string ProjectStatePath { get { return Path.Combine(SubjectFolder, "meta", "ps.json"); } }

    // Paths to subject manager files
    public static string SubjectMetaFolder { get { return Path.Combine(SubjectFolder, "meta"); } }
    public static string SubjectMetadataPath { get { return Path.Combine(SubjectMetaFolder, "smd.xml"); } }
    public static string SubjectCustomSpeechPath { get { return SubjectFolder + "/meta/speech.xml"; } }

    // Paths to audiogram files
    public static string AudiogramPath { get { return SubjectFolder + "/meta/agram.xml"; } }
    public static string LDLPath { get { return SubjectFolder + "/meta/ldlgram.xml"; } }

    // Speech test wav file folder
    public static readonly string BasicResourcesFolder = @"C:\Users\Public\Music\{4CF46EAB-0304-4429-9666-035ADFDB847F}\{18AE38D6-5684-4966-9047-C49547486142}";
    public static readonly string CalibrationFolder = Path.Combine(BasicResourcesFolder, "Calibration");

    // Speech test wav file folder
    public static readonly string SpeechWavFolder = @"C:/Users/Public/Music/{4CF46EAB-0304-4429-9666-035ADFDB847F}/{26766E8C-CF81-47D3-A998-C974848F67C0}";

    // User wav file folder
    public static readonly string UserWavFolder = @"C:/Users/Public/Music/{4CF46EAB-0304-4429-9666-035ADFDB847F}/{9a91fca2-bfe1-4f26-92e7-559f7cc80268}";
    
    // Temporary setup files
    public static readonly string TempSetupDataPath = Path.Combine(Application.temporaryCachePath, "su.bin");
    public static readonly string SubjectRegisterPath = Path.Combine(Application.temporaryCachePath, "sr.bin");
}
